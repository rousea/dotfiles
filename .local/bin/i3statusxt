#!/usr/bin/env python

# extends i3status output to add additional blocks

import sys
import json
import subprocess

def add(status, name, full_text, short_text=None, instance=None, color=None):
  entry = {'full_text' : '%s' % full_text, 'name' : '%s' % name}
  if short_text:
    entry['short_text'] = short_text
  if instance:
    entry['instance'] = instance
  if color:
    entry['color'] = color
  status.insert(0, entry)

def add_playerctl(status):
  try:
    command = ['playerctl', '-s', 'metadata', '--format', '" {{ title }} - {{ artist }} - {{ album }}"']
    player_status = subprocess.check_output(['playerctl', '-s', 'status']).decode('utf-8').strip('\n')

    full_text = subprocess.check_output(command).decode('utf-8').strip('\n').strip('"')

    if player_status == "Playing":
        full_text = u'\uf04c ' + full_text
    else:
        full_text = u'\uf04b ' + full_text

    short_text = full_text[:full_text.rfind("-") - 1]
    add(status, 'playerctl', full_text, short_text)
  except subprocess.CalledProcessError:
    pass

def add_bluetooth(status):
  try:
    command = ['bluetoothctl', 'info']
    subprocess.check_output(command)
    # \uf294
    full_text = ''
    add(status, 'bluetoothctl', full_text, full_text)
  except subprocess.CalledProcessError:
    pass


def write_line(line):
  sys.stdout.write(line + '\n')
  sys.stdout.flush()

def read_line():
  try:
    line = sys.stdin.readline().strip()
    if not line:
      sys.exit(1)
    return line
  except KeyboardInterrupt:
    sys.exit()

if __name__ == '__main__':
  # First line is version info
  write_line(read_line())

  # Second line starts array
  write_line(read_line())

  while True:
    # First entry doesn't have leading comma
    line, prefix = read_line(), ''
    # Ignore comma at start of lines
    if line.startswith(','):
      line, prefix = line[1:], ','

    entry = json.loads(line)
    #check_batt(entry)

    # Prepend entries in order
    add_playerctl(entry)
    add_bluetooth(entry)

    write_line(prefix + json.dumps(entry))
